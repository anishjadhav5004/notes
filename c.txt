c having 32 key words

format specifiers
%d %f %c

int c = 1,d; this is valid this means c = 1 and another variable d
pow(b,c) is right(include <math.h>) , b^c is wrong

modular operator doesn't works on decimal (1.1 % 3.4)

implicit type conversion is done by compiler which converts small to large but not large to small
eg. int a = 1.1 => wrong 
    float a = 1  => right 

explicit conversion means converting forcefully by programmer
eg . int a = (int)1.1
	output will be 1


pointers

#include <stdio.h>

void main() {
    
    int age = 22;
    
    int *ptr = &age;
    
    printf("%p , %p", *ptr,*&age);//same
    printf("%p , %p", ptr,&age);//same
}

note : use p or u to print address

typedef is used to give alise to datatypes like structure


typedef struct student{

	int id ;
	char section;
}std;

int main(){

	std s1; // instead of struct student s1;
	s1.id =11;
	s1.section ='a';

	//second case

	typedef int customeINT;
	customeINT x = 11;

	typedef int myInt x = 10;  // ❌ Invalid syntax

	
}

if we are exceeding array length and assign value then its runtime error not compile time
int arr[2]
arr[2]=1 //this will be compile time error

when we increament pointer then its get increamented by size of its datatype
eg. int i =1;
    int *ptr = &i;
    ptr++; //here ptr becomes +4

C allows implicit type conversion (also called type coercion) during assignment when the value can fit in the target type.

In this case:
22 is an int
a is a char
22 fits in the char range (which is typically -128 to 127 for signed char, or 0 to 255 for unsigned char)
So the compiler safely converts the value from int to char.


signed consists of -v and +ve 
signed is always converted to unsigned

Shifting left by n positions multiplies the number by 2^n (if no overflow). 
3 << 2  means Shift bits of 3 left by 2 so it will be 12 (3 × 4)

| Specifier | Type                | Example Value | Notes                          |
| --------- | ------------------- | ------------- | ------------------------------ |
| `%d`      | Signed decimal int  | `42`          | Also use `%i` for input/output |
| `%u`      | Unsigned int        | `42`          | No negative numbers            |
| `%f`      | Float or double     | `3.14`        | Defaults to 6 decimal places   |
| `%c`      | Character           | `'A'`         | Prints ASCII character         |
| `%s`      | String              | `"Hello"`     | Prints characters until `\0`   |
| `%x`      | Hexadecimal (lower) | `2a`          | Uses 0–9 and a–f               |
| `%X`      | Hexadecimal (upper) | `2A`          | Uses 0–9 and A–F               |
| `%o`      | Octal               | `52`          | Base 8                         |
| `%p`      | Pointer address     | `0x7ffdf123`  | Prints memory address          |
| `%%`      | Literal `%`         | `%`           | Used to print a percent sign   |

Why does i[str] work?
In C, a[b] is defined as *(a + b). Addition is commutative (a + b == b + a), so:

str[i] = *(str + i)

i[str] = *(i + str) = *(str + i) = str[i]

It's quirky but valid C.


The static variable retains its value between function calls.

Unlike normal local variables (which are created and destroyed each call), a static local variable is initialized only once and lives for the entire program run.


| Escape Sequence | Meaning                        | Example Output                |
| --------------- | ------------------------------ | ----------------------------- |
| `\n`            | Newline                        | Moves to a new line           |
| `\t`            | Tab (horizontal)               | Adds a tab space              |
| `\\`            | Backslash (`\`)                | Prints a single backslash     |
| `\"`            | Double quote (`"`)             | Prints a double quote         |
| `\'`            | Single quote (`'`)             | Prints a single quote         |
| `\?`            | Question mark (`?`)            | Useful in trigraph situations |
| `\0`            | Null character (end of string) | Used in string termination    |
| `%%`            | Percent sign in `printf()`     | Prints `%`                    |
\b removes its recent back character
"wht\bare you saying"
result : whare you saying

\r takes cursor to the starting of line again overwrite the character by its next characters
"good morning \rhello"
result : hellomornig

a:       | 1 | 2 | 3 | 4 | 5 | 6 |
address: 1000

a       = 1000  (points to a[0])
&a      = 1000  (points to entire array of 6 ints)
&a[0]   = 1000  (address of first element)

a + 1   = 1004  (points to a[1])
&a + 1  = 1024  (points past entire array: 6 * 4 bytes = 24 bytes ahead)



printf
Returns: The number of characters successfully printed (excluding the null terminator).
int count = printf("Hello, world!\n");
printf("Printed %d characters\n", count);

Hello, world!
Printed 14 characters //count \n also


scanf
Returns: The number of input items successfully matched and assigned.

int x, y;
int count = scanf("%d %d", &x, &y);
printf("Successfully read %d integers\n", count);

If the user inputs "10 20", count will be 2.
If input is invalid (e.g., "10 abc"), scanf might return 1 because it matched only the first integer.
If no input matches at all, it returns 0.
On end-of-file or error, it returns EOF (usually -1).


 ## (Token Pasting)
#define f(g, g2) g##g2
f(var, 12) becomes → var12

when signed number is assigned to unsigned int its get wrapup to unsigned int and assigned
unsigned int x = -1;

when signed and unsigned comparison is done signed gets converted to unsigned
unsigned int x = -1;
   int y = ~0;
   if(x == y)
      printf("same");
   else
      printf("not same");


imp
 #include<stdio.h>
int main()
{
  char *s[] = { "knowledge","is","power"};
  char **p;
  p = s;
  printf("%s ", ++*p);
  printf("%s ", *p++);
  printf("%s ", ++*p);

  getchar();
  return 0;
}

 char *s[] = { "knowledge","is","power"}; //array of string pointers &s[0]--> "knowledge", &s[1]-->"is"

enum Day {
    SUNDAY,
    MONDAY,
    TUESDAY,
    WEDNESDAY,
    THURSDAY,
    FRIDAY,
    SATURDAY
};
by default
SUNDAY = 0, MONDAY = 1, TUESDAY = 2, ...

enum constants are like named #define macros — they are fixed integer values at compile-time.
You can use the value of an enum, but you cannot change what that name refers to.

when you do left shift then basically you are multiplying that number by 2 for i th time (wher i = how much place you want to shift)

and right shift is dividing that no

signed int range -2^31 to 2^31 - 1
unsingned int range 0 to 2^32-1

unsigned char range is 0-255
signed char range is -128 to 127

XOR with itself is 0: --> b⊕b=0
XOR with 0 keeps the number unchanged:  --> a⊕0=a
XOR is associative and commutative: --> (a⊕b)⊕c=a⊕(b⊕c) and a⊕b=b⊕a

if number starts with 0 in c then it is treated as octal , 0X as hexadecimal

in logical or if first statement is true then second is not evaluated 
int x = 100, y = 200;
if (++x || ++y)
    printf("x = %d, y = %d", x, y);
else
    printf("condition failed");

in macro direct substitution has done
but in case of function first paramenters are evaluated and then substitution done

extern means:
"This variable or function is declared here, but its actual value or code is somewhere else."
It tells the compiler:
"Don't create it again — it already exists."
eg.
#include<stdio.h>
int count;
void display();
int main()
{
    count = 1;
    printf("Value of count is %d, ", count);
    display();
}
void display()
{
      extern int count;
      printf("\nValue of count is %d", count);
}
int a =0
a = a++ + a++ - a++ + ++a;
best trick to solve these que is 
use value and immediately increase it

use a and its value become 1 immediately so for next a++ a will be 1, so use this 1 and immediately increase value to 2
then use 2 and immediately increase it to 3 and now first increase it 4 and use it

void main()
{
    int i = 0;
    printf("%d %d", i, i++);
}
right to left


to convert 11111111 11111111 11111111 11111110 to hexadecimal 
Group the binary digits into 4-bit chunks, starting from the right. If necessary, add leading zeros to make groups of 4 bits.
so this results into :
1111 1111 1111 1111 1111 1111 1111 1110

| Binary | Hexadecimal |
| ------ | ----------- |
| 1111   | F           |
| 1110   | E           |

operator precedence :
| Precedence Level | Operators                                             | Description                            | Associativity        |               |               |
| ---------------- | ----------------------------------------------------- | -------------------------------------- | -------------------- | ------------- | ------------- |
| 1 (Highest)      | `()` `[]` `->` `.`                                    | Function call, array subscript, struct | Left-to-right        |               |               |
| 2                | `++` `--` `+` `-` `!` `~` `*` `&` `sizeof`            | Unary operators, type casts            | Right-to-left        |               |               |
| 3                | `*` `/` `%`                                           | Multiplication, division, modulus      | Left-to-right        |               |               |
| 4                | `+` `-`                                               | Addition, subtraction                  | Left-to-right        |               |               |
| 5                | `<<` `>>`                                             | Bitwise shift left/right               | Left-to-right        |               |               |
| 6                | `<` `<=` `>` `>=`                                     | Relational operators                   | Left-to-right        |               |               |
| 7                | `==` `!=`                                             | Equality operators                     | Left-to-right        |               |               |
| 8                | `&`                                                   | Bitwise AND                            | Left-to-right        |               |               |
| 9                | `^`                                                   | Bitwise XOR                            | Left-to-right        |               |               |
| 10               | \`                                                    | \`                                     | Bitwise OR           | Left-to-right |               |
| 11               | `&&`                                                  | Logical AND                            | Left-to-right        |               |               |
| 12               | \`                                                    |                                        | \`                   | Logical OR    | Left-to-right |
| 13               | `?:`                                                  | Ternary conditional                    | Right-to-left        |               |               |
| 14               | `=` `+=` `-=` `*=` `/=` `%=` `<<=` `>>=` `&=` `^=` \` | =\`                                    | Assignment operators | Right-to-left |               |
| 15               | `,`                                                   | Comma (expression separator)           | Left-to-right        |               |               |



